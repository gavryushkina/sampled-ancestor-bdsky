<project basedir="." default="build_jar_all_SABDSKY" name="BUILD_SABDSKY">
	<description>
	    Build SABDSKY. 
            Also used by Hudson SABDSKY project. 
	    JUnit test is available for this build.
	    $Id: build_SABDSKY.xml $
	</description>

	<!-- set global properties for this build -->
	<property name="srcSABDSKY" location="src" />
	<property name="buildSABDSKY" location="build" />
	<property name="libSABDSKY" location="lib" />
	<property name="release_dir" value="release" />
	<property name="distSABDSKY" location="${buildSABDSKY}/dist" />

	<property name="SA" location="../sampled-ancestors" />
	<property name="BDSKY" location="../bdsky" />
	<property name="SAclasspath" location="${SA}/build" />
	<property name="BSDSKYlasspath" location="${BDSKY}/build" />

	<property name="beast2path" location="../beast2" />
	<property name="libBeast2" location="${beast2path}/lib" />
	<property name="srcBeast2" location="${beast2path}/src" />
	<property name="beast2classpath" location="${beast2path}/build" />
    <property name="beastiiclasspath" location="../BEASTLabs/build" />
	<property name="bdskyclasspath" location="../bdsky/build" />
	<!--<property name="bdskyclasspath" location="../bdssm-beast2-read-only/build" />
    property name="beastclassicclasspath" location="../beast-classic/build" /-->
	<property name="Add_on_dir" value="${release_dir}/add-on" />

    <import file="${beast2path}/build.xml" />

	<property name="main_class_BEAST" value="beast.app.BeastMCMC" />
	<property name="report" value="${buildSABDSKY}/junitreport"/>

	<path id="classpath">
        <pathelement path="${buildSABDSKY}"/>
		<fileset dir="${libBeast2}" includes="junit-4.8.2.jar"/>
		<fileset dir="${libBeast2}" includes="fest.jar"/>
		<fileset dir="${libBeast2}" includes="jam.jar"/>
        <fileset dir="${libBeast2}" includes="beagle.jar"/>
        <pathelement path="${beast2classpath}"/>
        <pathelement path="${beastiiclasspath}"/>
		<pathelement path="${bdskyclasspath}"/>
        <!--pathelement path="${beastclassicclasspath}"/-->
	</path>

	<!-- start -->
	<target name="initSABDSKY">
		<echo message="${ant.project.name}: ${ant.file}" />

        <available file="version.xml" property="versionAvailable"/>
        <fail unless="versionAvailable">
            ** Required file version.xml does not exist. **
            If this is a new project, run "ant skeleton" from
            the command line to create the files required for
            your BEAST 2 package.
        </fail>

        <!-- Read package name and version from xml file -->
        <xmlproperty file="version.xml" prefix="fromVersionFile" />
        <property name="projName" value="${fromVersionFile.addon(name)}" />
        <property name="projVersion" value="${fromVersionFile.addon(version)}" />
	</target>

	<target name="cleanSABDSKY">
    	<delete dir="${buildSABDSKY}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_SABDSKY" depends="cleanSABDSKY,compile-allSABDSKY,junitSABDSKY"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
	<target name="build_jar_all_SABDSKY" depends="cleanSABDSKY,compile-allSABDSKY,junitSABDSKY,dist_all_SABDSKY"
        description="Clean and Build all run-time stuff">
	</target>


	<!-- No JUnit Test, clean previous build, compile Java source code, and make the SABDSKY.jar and beauti.jar -->
	<target name="build_jar_all_SABDSKY_NoJUnitTest" depends="cleanSABDSKY,compile-allSABDSKY,dist_all_SABDSKY"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
	<target name="compile-allSABDSKY" depends="initSABDSKY,compile-all">


	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath"/>
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}"/>

		<mkdir dir="${buildSABDSKY}" />

		<!-- Compile the java code from ${srcSABDSKY} into ${buildSABDSKY} /bin -->
		<!--
		<javac srcdir="${srcSABDSKY}" destdir="${buildSABDSKY}" classpathref="classpath"
		       fork="true"
		       memoryinitialsize="256m"
		       memorymaximumsize="256m"
			   includeAntRuntime='false'>
			<include name="beast/**/**" />
			<!- - compile JUnit test classes - ->
			<include name="test/beast/**" />
			<!- - do not compile skyline model - ->
			<exclude name="beast/**/SABDSKYBDSkylineModel*"/>
			<exclude name="test/**/SABDSKYBDSkylineMode*"/>
		</javac>
		-->
		<echo message="Successfully compiled." />
	</target>

	<!-- make the beast.jar and beauti.jar -->
	<target name="dist_all_SABDSKY" depends="compile-allSABDSKY" description="create SABDSKY jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distSABDSKY}" />

		<!-- Put everything in ${buildSABDSKY} into the beast.jar file -->
		<jar jarfile="${distSABDSKY}/SABDSKY.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main_class_BEAST}" />
			</manifest>
			<fileset dir="${buildSABDSKY}">
				<include name="beast/**/*.class" />
			</fileset>
			<fileset dir="${beast2classpath}">
				<include name="beast/**/*.class" />
				<include name="beast/**/*.properties" />
				<include name="beast/**/*.png" />
				<include name="beagle/**/*.class" />
				<include name="org/**/*.class" />
			</fileset>
			<!--<zipgroupfileset dir="${libBeast2}" includes="jam.jar" />
            <zipgroupfileset dir="${libBeast2}" includes="beagle.jar" />
            <zipgroupfileset dir="${libBeast2}" includes="colt.jar" />
            <zipgroupfileset dir="${libBeast2}" includes="commons-math3-3.1.1.jar" /> -->
		</jar>
		<!--
		<jar jarfile="${distSABDSKY}/SABDSKY.src.jar">
			<fileset dir="${srcSABDSKY}">
				<include name="beast/**/*.java" />
				<include name="beast/**/*.png" />
				<include name="beast/**/*.xsl" />
			</fileset>
        </jar>
        -->
		<jar jarfile="${distSABDSKY}/SABDSKY.addon.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${buildSABDSKY}">
				<include name="beast/**/*.class" />
				<include name="util/**/*.class" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<!-- run beast.jar -->
	<target name="run_SABDSKY">
		<java jar="${distSABDSKY}/SABDSKY.jar" fork="true" />
	</target>

	
	<!-- JUnit test -->
	<target name="junitSABDSKY">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${buildSABDSKY}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
				<fileset dir="${srcSABDSKY}">
                    <include name="test/**/*Test.java"/>                                         
				</fileset>
				<fileset dir="${srcBeast2}">
                    <include name="test/beast/integration/**/*Test.java"/>                                         
                    <exclude name="test/beast/integration/**/ResumeTest.java"/>                                         
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>
    
    <target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml"/>
			<report format="frames" todir="${report}"/>
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>


	<target name="addon"
	        depends="build_jar_all_SABDSKY_NoJUnitTest"
	        description="release BEAST 2 add-on version of Sampled Ancestor project">

		<delete dir="${Add_on_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${Add_on_dir}" />
		<mkdir dir="${Add_on_dir}/examples" />
		<mkdir dir="${Add_on_dir}/templates" />

		<copy todir="${Add_on_dir}">
			<fileset file="version.xml"/>
		</copy>
		<copy todir="${Add_on_dir}/examples">
			<fileset dir="examples" />
		</copy>
		<copy todir="${Add_on_dir}/templates">
			<fileset dir="templates" />
		</copy>

		<jar jarfile="${distSABDSKY}/SABDSKY.addon.v${projVersion}.zip">
			<fileset dir="${Add_on_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Package version release is finished." />
	</target>

</project>
